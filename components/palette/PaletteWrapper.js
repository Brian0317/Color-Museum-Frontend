import { useWeb3React } from "@web3-react/core";
import axios from "axios";
import Head from "next/head";
import React, { useEffect, useState } from "react";
import Web3 from "web3";
import ColorsFound from "../palette/ColorsFound";
import NoColor from "../palette/NoColor";
import NoConnect from "../palette/NoConnect";
import styles from "../../styles/modules/palette/palette.module.css";
import { BACKEND, PROVIDER, SMARTCONTRACTADDR } from "../../utils/constants";
import { tokensOfOwnerABI } from "../../utils/tokensOfOwnerABI";
import { useSelector } from "react-redux";

const web3 = new Web3(new Web3.providers.HttpProvider(PROVIDER));
const contract = new web3.eth.Contract([tokensOfOwnerABI], SMARTCONTRACTADDR);

const PaletteWrapper = () => {
  const { connectedAddress } = useSelector((state) => state.minting);
  const { localStorageChange } = useSelector((state) => state.toggle);
  const [authenticated, setAuthenticated] = useState(false);
  const [singleNFTs, setSingleNFTs] = useState();
  const [singleNFTsAmount, setSingleNFTsAmount] = useState();

  useEffect(async () => {
    try {
      if (connectedAddress) {
        const nfts = await contract.methods
          .tokensOfOwner(connectedAddress)
          .call();
        const apiCalls = [];
        let responses = [];
        const data = [];
        nfts.forEach((uint256) => {
          apiCalls.push(
            axios.get(`${BACKEND}/api/v1/image/get-image/${uint256}`)
          );
        });
        responses = await Promise.all(apiCalls);
        responses.forEach((response) => {
          data.push(response.data);
        });
        setSingleNFTs(data);
        setSingleNFTsAmount(nfts.length);
      }
    } catch (error) {
      console.log(error);
    }
  }, [connectedAddress]);

  useEffect(() => {
    if (localStorage.getItem("connectedAddress")) {
      let connected = localStorage.getItem("connectedAddress");
      connected = connected.slice(17, connected.length);
      setAuthenticated(true);
    } else {
      setAuthenticated(false);
    }
  }, [localStorageChange, connectedAddress]);

  return (
    <section className={styles.wrapper}>
      <Head>
        <title>Palette</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {!authenticated ? (
        <NoConnect />
      ) : singleNFTsAmount > 0 ? (
        <ColorsFound
          address={connectedAddress}
          singleNFTsAmount={singleNFTsAmount}
          singleNFTs={singleNFTs}
        />
      ) : (
        <NoColor address={connectedAddress} />
      )}
    </section>
  );
};

export default PaletteWrapper;
